// -------------------------------------------------------------
//
// Module: Cheby2_filter
// Generated by MATLAB(R) 9.2 and the Filter Design HDL Coder 3.1.1.
// Generated on: 2019-01-25 11:05:07
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// TargetDirectory: H:\Vivado\FPGA_Communicate_Base\lab3_LPF_IIR\Src
// Name: Cheby2_filter
// TargetLanguage: Verilog
// TestBenchStimulus: step ramp chirp 

// Filter Specifications:
//
// Sample Rate     : N/A (normalized frequency)
// Response        : Lowpass
// Specification   : N,Fst,Ast
// Filter Order    : 4
// Stopband Atten. : 40 dB
// Stopband Edge   : 0.5
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// Folding Factor        : 1
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time IIR Filter (real)
// -------------------------------
// Filter Structure    : Direct-Form II, Second-Order Sections
// Number of Sections  : 2
// Stable              : Yes
// Linear Phase        : No
// Arithmetic          : fixed
// Numerator           : s12,10 -> [-2 2)
// Denominator         : s12,10 -> [-2 2)
// Scale Values        : s12,12 -> [-5.000000e-01 5.000000e-01)
// Input               : s12,12 -> [-5.000000e-01 5.000000e-01)
// Section Input       : s12,8 -> [-8 8)
// Section Output      : s12,8 -> [-8 8)
// Output              : s12,8 -> [-8 8)
// State               : s12,12 -> [-5.000000e-01 5.000000e-01)
// Numerator Prod      : s24,22 -> [-2 2)
// Denominator Prod    : s24,22 -> [-2 2)
// Numerator Accum     : s26,22 -> [-8 8)
// Denominator Accum   : s26,22 -> [-8 8)
// Round Mode          : convergent
// Overflow Mode       : wrap
// -------------------------------------------------------------




`timescale 1 ns / 1 ns

module Cheby2_filter
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [11:0] filter_in; //sfix12_En12
  output  signed [11:0] filter_out; //sfix12_En8

////////////////////////////////////////////////////////////////
//Module Architecture: Cheby2_filter
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [11:0] scaleconst1 = 12'b010011000000; //sfix12_En12
  parameter signed [11:0] coeff_b1_section1 = 12'b010000000000; //sfix12_En10
  parameter signed [11:0] coeff_b2_section1 = 12'b000010100010; //sfix12_En10
  parameter signed [11:0] coeff_b3_section1 = 12'b010000000000; //sfix12_En10
  parameter signed [11:0] coeff_a2_section1 = 12'b110001000111; //sfix12_En10
  parameter signed [11:0] coeff_a3_section1 = 12'b001001001001; //sfix12_En10
  parameter signed [11:0] scaleconst2 = 12'b001001111000; //sfix12_En12
  parameter signed [11:0] coeff_b1_section2 = 12'b010000000000; //sfix12_En10
  parameter signed [11:0] coeff_b2_section2 = 12'b010111110101; //sfix12_En10
  parameter signed [11:0] coeff_b3_section2 = 12'b010000000000; //sfix12_En10
  parameter signed [11:0] coeff_a2_section2 = 12'b110110100010; //sfix12_En10
  parameter signed [11:0] coeff_a3_section2 = 12'b000010000110; //sfix12_En10
  // Signals
  reg  signed [11:0] input_register; // sfix12_En12
  wire signed [27:0] scale1; // sfix28_En24
  wire signed [23:0] mul_temp; // sfix24_En24
  wire signed [11:0] scaletypeconvert1; // sfix12_En8
  // Section 1 Signals 
  wire signed [25:0] a1sum1; // sfix26_En22
  wire signed [25:0] a2sum1; // sfix26_En22
  wire signed [25:0] b1sum1; // sfix26_En22
  wire signed [25:0] b2sum1; // sfix26_En22
  wire signed [11:0] typeconvert1; // sfix12_En12
  reg  signed [11:0] delay_section1 [0:1] ; // sfix12_En12
  wire signed [25:0] inputconv1; // sfix26_En22
  wire signed [23:0] a2mul1; // sfix24_En22
  wire signed [23:0] a3mul1; // sfix24_En22
  wire signed [23:0] b1mul1; // sfix24_En22
  wire signed [23:0] b2mul1; // sfix24_En22
  wire signed [23:0] b3mul1; // sfix24_En22
  wire signed [25:0] sub_cast; // sfix26_En22
  wire signed [25:0] sub_cast_1; // sfix26_En22
  wire signed [26:0] sub_temp; // sfix27_En22
  wire signed [25:0] sub_cast_2; // sfix26_En22
  wire signed [25:0] sub_cast_3; // sfix26_En22
  wire signed [26:0] sub_temp_1; // sfix27_En22
  wire signed [25:0] b1multypeconvert1; // sfix26_En22
  wire signed [25:0] add_cast; // sfix26_En22
  wire signed [25:0] add_cast_1; // sfix26_En22
  wire signed [26:0] add_temp; // sfix27_En22
  wire signed [25:0] add_cast_2; // sfix26_En22
  wire signed [25:0] add_cast_3; // sfix26_En22
  wire signed [26:0] add_temp_1; // sfix27_En22
  wire signed [11:0] section_result1; // sfix12_En8
  wire signed [27:0] scale2; // sfix28_En24
  wire signed [23:0] mul_temp_1; // sfix24_En20
  wire signed [11:0] scaletypeconvert2; // sfix12_En8
  // Section 2 Signals 
  wire signed [25:0] a1sum2; // sfix26_En22
  wire signed [25:0] a2sum2; // sfix26_En22
  wire signed [25:0] b1sum2; // sfix26_En22
  wire signed [25:0] b2sum2; // sfix26_En22
  wire signed [11:0] typeconvert2; // sfix12_En12
  reg  signed [11:0] delay_section2 [0:1] ; // sfix12_En12
  wire signed [25:0] inputconv2; // sfix26_En22
  wire signed [23:0] a2mul2; // sfix24_En22
  wire signed [23:0] a3mul2; // sfix24_En22
  wire signed [23:0] b1mul2; // sfix24_En22
  wire signed [23:0] b2mul2; // sfix24_En22
  wire signed [23:0] b3mul2; // sfix24_En22
  wire signed [25:0] sub_cast_4; // sfix26_En22
  wire signed [25:0] sub_cast_5; // sfix26_En22
  wire signed [26:0] sub_temp_2; // sfix27_En22
  wire signed [25:0] sub_cast_6; // sfix26_En22
  wire signed [25:0] sub_cast_7; // sfix26_En22
  wire signed [26:0] sub_temp_3; // sfix27_En22
  wire signed [25:0] b1multypeconvert2; // sfix26_En22
  wire signed [25:0] add_cast_4; // sfix26_En22
  wire signed [25:0] add_cast_5; // sfix26_En22
  wire signed [26:0] add_temp_2; // sfix27_En22
  wire signed [25:0] add_cast_6; // sfix26_En22
  wire signed [25:0] add_cast_7; // sfix26_En22
  wire signed [26:0] add_temp_3; // sfix27_En22
  wire signed [11:0] output_typeconvert; // sfix12_En8
  reg  signed [11:0] output_register; // sfix12_En8

  // Block Statements
  always @ (posedge clk or posedge reset)
    begin: input_reg_process
      if (reset == 1'b1) begin
        input_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          input_register <= filter_in;
        end
      end
    end // input_reg_process

  assign mul_temp = input_register * scaleconst1;
  assign scale1 = $signed({{4{mul_temp[23]}}, mul_temp});

  assign scaletypeconvert1 = (scale1[27:0] + {scale1[16], {15{~scale1[16]}}})>>>16;

  //   ------------------ Section 1 ------------------

  assign typeconvert1 = (a1sum1[21:0] + {a1sum1[10], {9{~a1sum1[10]}}})>>>10;

  always @ (posedge clk or posedge reset)
    begin: delay_process_section1
      if (reset == 1'b1) begin
        delay_section1[0] <= 12'b000000000000;
        delay_section1[1] <= 12'b000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_section1[1] <= delay_section1[0];
          delay_section1[0] <= typeconvert1;
        end
      end
    end // delay_process_section1

  assign inputconv1 = $signed({scaletypeconvert1[11:0], 14'b00000000000000});

  assign a2mul1 = delay_section1[0] * coeff_a2_section1;

  assign a3mul1 = delay_section1[1] * coeff_a3_section1;

  assign b1mul1 = $signed({typeconvert1[11:0], 10'b0000000000});

  assign b2mul1 = delay_section1[0] * coeff_b2_section1;

  assign b3mul1 = $signed({delay_section1[1][11:0], 10'b0000000000});

  assign sub_cast = inputconv1;
  assign sub_cast_1 = $signed({{2{a2mul1[23]}}, a2mul1});
  assign sub_temp = sub_cast - sub_cast_1;
  assign a2sum1 = sub_temp[25:0];

  assign sub_cast_2 = a2sum1;
  assign sub_cast_3 = $signed({{2{a3mul1[23]}}, a3mul1});
  assign sub_temp_1 = sub_cast_2 - sub_cast_3;
  assign a1sum1 = sub_temp_1[25:0];

  assign b1multypeconvert1 = $signed({{2{b1mul1[23]}}, b1mul1});

  assign add_cast = b1multypeconvert1;
  assign add_cast_1 = $signed({{2{b2mul1[23]}}, b2mul1});
  assign add_temp = add_cast + add_cast_1;
  assign b2sum1 = add_temp[25:0];

  assign add_cast_2 = b2sum1;
  assign add_cast_3 = $signed({{2{b3mul1[23]}}, b3mul1});
  assign add_temp_1 = add_cast_2 + add_cast_3;
  assign b1sum1 = add_temp_1[25:0];

  assign section_result1 = (b1sum1[25:0] + {b1sum1[14], {13{~b1sum1[14]}}})>>>14;

  assign mul_temp_1 = section_result1 * scaleconst2;
  assign scale2 = $signed({mul_temp_1[23:0], 4'b0000});

  assign scaletypeconvert2 = (scale2[27:0] + {scale2[16], {15{~scale2[16]}}})>>>16;

  //   ------------------ Section 2 ------------------

  assign typeconvert2 = (a1sum2[21:0] + {a1sum2[10], {9{~a1sum2[10]}}})>>>10;

  always @ (posedge clk or posedge reset)
    begin: delay_process_section2
      if (reset == 1'b1) begin
        delay_section2[0] <= 12'b000000000000;
        delay_section2[1] <= 12'b000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_section2[1] <= delay_section2[0];
          delay_section2[0] <= typeconvert2;
        end
      end
    end // delay_process_section2

  assign inputconv2 = $signed({scaletypeconvert2[11:0], 14'b00000000000000});

  assign a2mul2 = delay_section2[0] * coeff_a2_section2;

  assign a3mul2 = delay_section2[1] * coeff_a3_section2;

  assign b1mul2 = $signed({typeconvert2[11:0], 10'b0000000000});

  assign b2mul2 = delay_section2[0] * coeff_b2_section2;

  assign b3mul2 = $signed({delay_section2[1][11:0], 10'b0000000000});

  assign sub_cast_4 = inputconv2;
  assign sub_cast_5 = $signed({{2{a2mul2[23]}}, a2mul2});
  assign sub_temp_2 = sub_cast_4 - sub_cast_5;
  assign a2sum2 = sub_temp_2[25:0];

  assign sub_cast_6 = a2sum2;
  assign sub_cast_7 = $signed({{2{a3mul2[23]}}, a3mul2});
  assign sub_temp_3 = sub_cast_6 - sub_cast_7;
  assign a1sum2 = sub_temp_3[25:0];

  assign b1multypeconvert2 = $signed({{2{b1mul2[23]}}, b1mul2});

  assign add_cast_4 = b1multypeconvert2;
  assign add_cast_5 = $signed({{2{b2mul2[23]}}, b2mul2});
  assign add_temp_2 = add_cast_4 + add_cast_5;
  assign b2sum2 = add_temp_2[25:0];

  assign add_cast_6 = b2sum2;
  assign add_cast_7 = $signed({{2{b3mul2[23]}}, b3mul2});
  assign add_temp_3 = add_cast_6 + add_cast_7;
  assign b1sum2 = add_temp_3[25:0];

  assign output_typeconvert = (b1sum2[25:0] + {b1sum2[14], {13{~b1sum2[14]}}})>>>14;

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // Cheby2_filter
